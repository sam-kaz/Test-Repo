/**
 * This program was created as a part of coding challenge for AlexSolutions
 *
 * @author  Syed Kazmi
 * @version 1.0
 * @date 23-05-2018
 */

package com.alexsolutions;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class CoursePathBuilder {
    static HashMap<Integer, Course> courses=new HashMap<Integer, Course>();
    static ArrayList<Integer> coursesOrder=new ArrayList();
    static String prerequisites_path="/home/sam/IdeaProjects/TestSam/prerequisites.csv";
    static String courses_path="/home/sam/IdeaProjects/TestSam/courses.csv";
    static Scanner sc = new Scanner(System.in);
    public static void main(String[] args) throws IOException {
        if(args.length < 2)
        {
            System.out.printf("The Path for courses.csv and prerequisites.csv are missing\n");
            loadFilesPathIfNotProvidedInArgs();
        }

        try {
            loadCourses();
            loadPrerequisitesData();
            getCoursesWithNoPrerequisite();
            getCoursesThatHasPreRequisitesOnlyInCourseOrder();
            printOrder();
        }
        catch (IOException ex){
            loadFilesPathIfNotProvidedInArgs();
            ex.getMessage();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     *This is for printing the order
     */
    public static void printOrder(){
        System.out.printf("The only possible order of the courses is \n");
        for (Integer a:coursesOrder) {
            System.out.printf("Course ID %d, Course Name %s \n",a,courses.get(a).getName());
        }
    }

    /**
     *Thats for getting the information about the file paths again
     */
    public static void loadFilesPathIfNotProvidedInArgs(){
        while(courses_path.equals(""))
            {System.out.printf("Please provide the path for courses.csv");
            courses_path = sc.nextLine();}

        while(prerequisites_path.equals(""))
            {System.out.printf("Please provide the path for prerequisites.csv");
            prerequisites_path = sc.nextLine();}

    }

    /**
     *Thats the actual path builder for the courses
     */
    public static void getCoursesThatHasPreRequisitesOnlyInCourseOrder(){
        int loopTiming=coursesOrder.size(); // for the worst case scenario if one of the course is depending on all the courses
        while(loopTiming>=0) {
            for (Map.Entry<Integer, Course> nextUnit : courses.entrySet()) {

                if (nextUnit.getValue().getPreRequisites().size() > 0 && !coursesOrder.contains(nextUnit.getKey())) {
                    boolean allCoursesInCoursesOrder = true;
                    for (Map.Entry<Integer, Course> nextUnitPrereq : nextUnit.getValue().getPreRequisites().entrySet()) {
                        if (!coursesOrder.contains(nextUnitPrereq.getKey())) {
                            allCoursesInCoursesOrder = false;
                        }
                    }
                    if (allCoursesInCoursesOrder) {
                        coursesOrder.add(nextUnit.getKey());
                    }
                }
            }
            loopTiming--;
        }
    }

    /**
     *This method add all the units that have no prerequisite
     * @return
     */
    public  static HashMap<Integer, Course>  getCoursesWithNoPrerequisite(){
        HashMap<Integer, Course> tempCourses =new HashMap<>();
        for (Map.Entry<Integer, Course> p : courses.entrySet()) {
            if(p.getValue().getPreRequisites().size()==0){
                coursesOrder.add(p.getKey());
            }
        }
        return tempCourses;
    }

    /**
     *That method load adata into hashmap and throw relavent exception if an  error occured
     *
     * @throws NumberFormatException
     * @throws IOException
     * @throws Exception
     */
    private static void loadPrerequisitesData() throws NumberFormatException, IOException,Exception {
        BufferedReader br= getBufferReader(prerequisites_path);
        String line;
        try{
            while ((line = br.readLine()) != null) {
                String[] prerequisite  = line.split(",");
                if(! prerequisite[0].equalsIgnoreCase("course") && !prerequisite[1].equalsIgnoreCase("prerequisite") ){
                    int currentCouseId=Integer.parseInt(prerequisite[0]);
                    int dependentCouseId=Integer.parseInt(prerequisite[1]);
                    Course currentCourse =courses.get(currentCouseId);
                    Course dependentCourse=courses.get(dependentCouseId);
                    currentCourse.getPreRequisites().put(dependentCourse.getId(),dependentCourse);
                }
            }
        }
        catch (IOException ex){
            prerequisites_path="";
            throw new IOException("prerequisites.csv not found please make sure you have supplied the correct path");
        }
        catch (NumberFormatException ex){
            throw new NumberFormatException("Error occured while parsing the course ID in courses please make sure the strings or invalid chars does not exists in an ID");
        }
        catch (Exception ex){
            throw new Exception("Issue while parsing prerequisites.csv please make sure the file contains data in 'id','id' format");
        }
    }

    /**
     *That method load adata into hashmap and throw relavent exception if an  error occured
     * @throws NumberFormatException
     * @throws IOException
     * @throws Exception
     */
    private static void loadCourses() throws NumberFormatException, IOException,Exception {
        try{
            BufferedReader br= getBufferReader(courses_path);
            String line = br.readLine();
            while ((line = br.readLine()) != null) {
                String[] course  = line.split(",");
                if(! course[0].equalsIgnoreCase("id") && !course[1].equalsIgnoreCase("title") ){
                int courseId=Integer.parseInt(course[0]);
                courses.put(courseId,new Course(courseId,course[1].trim()));}
            }
        }
        catch (IOException ex){
            courses_path="";
            throw new IOException("courses.csv not found please make sure you have supplied the correct path");
        }
        catch (NumberFormatException ex){
            throw new NumberFormatException("Error occured while parsing the course ID in courses please make sure the strings or invalid chars does not exists in an ID");
        }
        catch (Exception ex){
            throw new Exception("Issue while parsing courses.csv please make sure the file contains data in 'id','course name' format");
        }
    }

    /**
     *
     * @param filePath
     * @return
     * @throws FileNotFoundException
     */
    public static BufferedReader getBufferReader(String filePath) throws FileNotFoundException {
        BufferedReader br = null;
        br = new BufferedReader(new FileReader(filePath));
        return br;
    }

}

